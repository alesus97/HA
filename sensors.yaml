#### Blitzwolf SPH2 - Spina1 ####  

#  - platform: mqtt
#    name: "Spina1: Voltage"
#    state_topic: "tele/spina1/SENSOR"
#    value_template: '{{ value_json["ENERGY"]["Voltage"] }}'
#    unit_of_measurement: "V"
#    icon: mdi:flash-circle
#    availability_topic: "tele/spina1/LWT"
#    payload_available: "Online"
#    payload_not_available: "Offline"
    
#  - platform: mqtt
#    name: "Spina1: Current"
#    state_topic: "tele/spina1/SENSOR"
#    value_template: '{{ value_json["ENERGY"]["Current"] }}'
#    unit_of_measurement: "A"
#    icon: mdi:current-ac
#    availability_topic: "tele/spina1/LWT"
#    payload_available: "Online"
#    payload_not_available: "Offline"
    
#  - platform: mqtt
#    name: "Spina1: Power"
#    state_topic: "tele/spina1/SENSOR"
#    value_template: '{{ value_json["ENERGY"]["Power"] }}'
#    unit_of_measurement: "W"
#    icon: mdi:flash-outline
#    availability_topic: "tele/spina1/LWT"
#    payload_available: "Online"
#    payload_not_available: "Offline"
    
#  - platform: mqtt
#    name: "Spina1: Energy Today"
#    state_topic: "tele/spina1/SENSOR"
#    value_template: '{{ value_json["ENERGY"]["Today"] }}'
#    unit_of_measurement: "kWh"
#    icon: mdi:circle-slice-3
#    availability_topic: "tele/spina1/LWT"
#    payload_available: "Online"
#    payload_not_available: "Offline"
    
#  - platform: mqtt
#    name: "Spina1: Energy Yesterday"
#    state_topic: "tele/spina1/SENSOR"
#    value_template: '{{ value_json["ENERGY"]["Yesterday"] }}'
#    unit_of_measurement: "kWh"
#    availability_topic: "tele/spina1/LWT"
#    payload_available: "Online"
#    payload_not_available: "Offline"
    
#  - platform: mqtt
#    name: "Spina1: Energy Total"
#    state_topic: "tele/spina1/SENSOR"
#    value_template: '{{ value_json["ENERGY"]["Total"] }}'
#    unit_of_measurement: "kWh"
#    icon: mdi:circle-slice-8
#    availability_topic: "tele/spina1/LWT"
#    payload_available: "Online"
#    payload_not_available: "Offline"
    
    #### Blitzwolf SPH2 - Spina2 ####  

#  - platform: mqtt
#    name: "Spina2: Voltage"
#    state_topic: "tele/spina2/SENSOR"
#    value_template: '{{ value_json["ENERGY"]["Voltage"] }}'
#    unit_of_measurement: "V"
#    icon: mdi:flash-circle
#    availability_topic: "tele/spina2/LWT"
#    payload_available: "Online"
#    payload_not_available: "Offline"
    
#  - platform: mqtt
#    name: "Spina2: Current"
#    state_topic: "tele/spina2/SENSOR"
#    value_template: '{{ value_json["ENERGY"]["Current"] }}'
#    unit_of_measurement: "A"
#    icon: mdi:current-ac
#    availability_topic: "tele/spina2/LWT"
#    payload_available: "Online"
#    payload_not_available: "Offline"
    
#  - platform: mqtt
#    name: "Spina2: Power"
#    state_topic: "tele/spina2/SENSOR"
#    value_template: '{{ value_json["ENERGY"]["Power"] }}'
#    unit_of_measurement: "W"
#    icon: mdi:flash-outline
#    availability_topic: "tele/spina2/LWT"
#    payload_available: "Online"
#    payload_not_available: "Offline"
    
#  - platform: mqtt
#    name: "Spina2: Energy Today"
#    state_topic: "tele/spina2/SENSOR"
#    value_template: '{{ value_json["ENERGY"]["Today"] }}'
#    unit_of_measurement: "kWh"
#    icon: mdi:circle-slice-3
#    availability_topic: "tele/spina2/LWT"
#    payload_available: "Online"
#    payload_not_available: "Offline"
#    
#  - platform: mqtt
#    name: "Spina2: Energy Yesterday"
#    state_topic: "tele/spina2/SENSOR"
#    value_template: '{{ value_json["ENERGY"]["Yesterday"] }}'
#    unit_of_measurement: "kWh"
#    availability_topic: "tele/spina2/LWT"
#    payload_available: "Online"
#    payload_not_available: "Offline"
    
#  - platform: mqtt
#    name: "Spina2: Energy Total"
#    state_topic: "tele/spina2/SENSOR"
#    value_template: '{{ value_json["ENERGY"]["Total"] }}'
#    unit_of_measurement: "kWh"
#    icon: mdi:circle-slice-8
#    availability_topic: "tele/spina2/LWT"
#    payload_available: "Online"
#    payload_not_available: "Offline"
    
    
    
## Raspberry Pi ##


  #==============================
  #=== Installed hass.io version
  #==============================
  - platform: version
    name: Installed Version
    source: local


  #================================
  #=== Latest Available HA Version
  #================================
  - platform: version
    name: Latest Available Version
    beta: false
    image: raspberrypi3
    source: hassio


  #=======================
  #=== Raspberry Pi Power
  #=======================
#  - platform: rpi_power
#    text_state: True


  #=============================================
  #=== Last boot time, Disk, memory & CPU usage
  #=============================================
  - platform: systemmonitor
    resources:
      - type: last_boot
      - type: disk_use_percent
        arg: /
      - type: disk_use
        arg: /
      - type: disk_free
        arg: /
      - type: memory_use_percent
      - type: processor_use

  
  #====================
  #=== CPU Temperature
  #====================
  - platform: command_line
    name: CPU Temp
    command: "cat /sys/class/thermal/thermal_zone0/temp"
    unit_of_measurement: "Â°C"
    value_template: '{{ value | multiply(0.001) | round(1) }}'


  #===================
  #=== System Up Time
  #===================
  - platform: uptime


  - platform: template
    sensors:

      #==========================
      #=== Home Assistant uptime
      #==========================
      ha_uptime:
        friendly_name: HA Uptime
        value_template: >
          {% if states('sensor.uptime') == '0.0' %} 
            Just restarted...
          {% else %}
            {% macro phrase(value, name) %}
            {%- set value = value | int %}
            {%- set end = 's' if value > 1 else '' %}
            {{- '{} {}{}'.format(value, name, end) if value | int > 0 else '' }}
            {%- endmacro %}
            
            {% set weeks = (states('sensor.uptime') | int / 7) | int %}
            {% set days = (states('sensor.uptime') | int) - (weeks * 7) %}
            {% set hours = (states('sensor.uptime') | float - states('sensor.uptime') | int) * 24 %}
            {% set minutes = (hours - hours | int) * 60 %}

            {{ [ phrase(weeks, 'week'), phrase(days, 'day'), phrase(hours, 'hr'), phrase(minutes, 'min') ] | select('!=','') | list | join(', ') }}
          {% endif %}


      #=========================================
      #=== Raspberry Pi last boot date and time
      #=========================================
      last_boot_date_time:
        friendly_name: Last Boot
        value_template: >
          {% set date = as_timestamp(states('sensor.last_boot')) | timestamp_custom('%d') %}
          {% set date = '{:01}'.format(date | int) %}
          {% if date in ('1', '21', '31') %}
            {% set date = date ~ 'st' %}
          {% elif date in ('2', '22') %}
            {% set date = date ~ 'nd' %}
          {% elif date in ('3', '23') %}
            {% set date = date ~ 'rd' %}
          {% else %}
            {% set date = date ~ 'th' %}
          {% endif %}

          {{ as_timestamp(states('sensor.last_boot')) | timestamp_custom('%H:%M on %a') }} {{ date }} {{ as_timestamp(states('sensor.last_boot')) | timestamp_custom('%b %Y') }}


      #=========================
      #=== Raspberry Pi Up Time
      #=========================
      rpi_uptime:
        friendly_name: RPi Uptime
        value_template: >
          {% set up_time = as_timestamp(now()) - as_timestamp(states('sensor.last_boot')) %}

          {% set minutes = (up_time // 60) | int %}
          {% set hours = (minutes // 60) %}
          {% set days = (hours // 24) %}
          {% set weeks = (days // 7) %}

          {% set minutes = (minutes % 60) %}
          {% set hours =  (hours % 24) %}
          {% set days = (days % 7) %}

          {% macro phrase(value, name) %}
                    {%- set value = value %}
                    {%- set end = 's' if value > 1 else '' %}
                    {{- '{} {}{}'.format(value, name, end) if value | int > 0 else '' }}
          {%- endmacro %}
                    
          {% set text = [ phrase(weeks, 'week'), phrase(days, 'day'), phrase(hours, 'hr'), phrase(minutes, 'min') ] | select('!=','') | list | join(', ') %}
          {% set last_comma = text.rfind(',') %}
          {% if last_comma != -1 %}
            {% set text = text[:last_comma] + ' and' + text[last_comma + 1:] %}
          {% endif %}
          
          {{ text }}   
    
    
    
      #=========================
      #=== Db size check sensor
      #=========================  
  - platform: filesize
    file_paths:
      - /config/home-assistant_v2.db
    
    